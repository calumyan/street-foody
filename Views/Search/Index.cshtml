@model IEnumerable<StreetVendor>;
@using System.Linq;
@{
    ViewData["Title"] = "Search";
}

<div class="homepage-layout page">
    <div id="alert">
        <span id="close-btn" onclick="this.parentElement.style.display='none'"> &times; </span>
        &#8594; Precaution: Most street vendors take cash only. Please&nbspbe&nbspprepared&nbspto&nbspbring&nbspcash!&nbsp&#8592;
    </div>
    <div id="filter-sort">
        <button id="filter" class="small-btn" style="margin-right: 10px"><img src="~/images/filter.png" alt=""
                class="btn-secondary-icon">&nbsp;Filter</button>
        <div class="select">
            <form id="sort-form" method="POST">
                <select form="sort-form" name="sort" onchange="this.form.submit()">
                    <option value="none">Sort by</option>
                    <option value="highestRated">Highest Rated</option>
                    <option value="lowestPrice">Lowest Price</option>
                </select>
            </form>
        </div>
    </div>
    <div id="wrapper" style="overflow: hidden;">
    @{
        if (Model.Count() > 0)
        {
        <div id="filter-col">
            <h2 class="filter-title">Opening hours</h2>
            <form class="filter-list" method="POST">
                <div>
                    <input type="checkbox" class="checkbox" id="open-now" name="open-now" value="open-now" />
                    <label for="open-now"> Open now </label>
                </div>
            </form>
            <h2 class="filter-title">Ratings</h2>
            <form action="" class="filter-list">
                <div>
                    <input type="checkbox" class="checkbox" id="5.0" name="5.0" />
                    <label for="5.0"> 5.0 </label>
                </div>
                <div>
                    <input type="checkbox" class="checkbox" id="4.0-5.0" name="4.0+" />
                    <label for="4.0-5.0"> 4.0+ </label>
                </div>
                <div>
                    <input type="checkbox" class="checkbox" id="3.0-4.0" name="3.0-4.0" />
                    <label for="3.0-4.0"> 3.0+ </label>
                </div>

            </form>
        </div>
        <div id="result-col">
            @foreach (var vendor in Model)
            {   
                string locationDisp = vendor.VendorHours.Count > 1 ? "Various locations" : vendor.VendorHours.ToList()[0].Location;
                // PriceRange array is made sure to be of length 2 during data seeding.
                string priceDisp = vendor.PriceRange[0] == vendor.PriceRange[1] 
                ? (vendor.PriceRange[0] == 99999999 ? "Not available" : vendor.PriceRange[0].ToString("#,###"))
                : vendor.PriceRange[0].ToString("#,###") + "đ - " + vendor.PriceRange[1].ToString("#,###") + "đ";
                string photoURL = vendor.PhotoUrl == null
                ? Url.Content("~/images/logo.png")
                : vendor.PhotoUrl;
                string avgRatingDisp = vendor.AverageRating == -0 ? "Not available" : "" + vendor.AverageRating.ToString();
                List<FoodCategory> categories = vendor.FoodCategories;

                <div id="@vendor.VendorID" class="vndr-card" onclick="location.href=`Vendor?ID=@vendor.VendorID`">
                    <div class="vndr-image"><img src="@photoURL" alt="@vendor.EnglishName" /></div>
                    <h3 class="stand-name">
                        @Html.DisplayFor(modelItem => vendor.VietnameseName)
                    </h3>
                    <div class="vndr-location"> @locationDisp
                    </div>
                    <div class="vndr-categories">
                        <div class="img">
                            <img src="~/images/menu.png" alt="" class="inline-icon" />
                        </div>
                        <div class="categories-textbox">
                            @foreach (var (category, i) in categories.Select((category, i) => (category, i))) {
                                string categoryDisp = category.EnglishName;
                                categoryDisp = categoryDisp.Substring(categoryDisp.IndexOf("|") + 1);
                                @* I decided to add the commas this way because it would be harder to achieve word breaking,
                                especially for long categories' names, using :after in CSS. *@
                                categoryDisp = i != categories.Count - 1 ? categoryDisp + ", " : categoryDisp; 
                                @categoryDisp
                            }
                        </div>
                    </div>
                    <div class="vndr-rating-price">
                        <img src="~/images/star.png" alt="" class="inline-icon" />
                        @avgRatingDisp &nbsp &nbsp &nbsp
                        <br />
                    <img src="~/images/price-tag.png" alt="" class="inline-icon" /> @priceDisp
                    </div>
                    <div class="right-caret"><img src="~/images/right-caret.png" alt="" /></div>
                </div>
            }
        </div>
        } else {
            <div id="not-found">
                <h3 style="font-size: 2rem; text-align: center">Sorry, we couldn't find any matches from our database :(</h3>
                <a id="sign-up" style="width: 60%; text-align: center" href="https://forms.gle/PU1baBndNHAus6qt7">
                    Help us expand the Street Foody database!
                </a>
            </div>
        }
    }
    </div>
</div>
