// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using street_foody.Models;

namespace street_foody.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210222024702_v2")]
    partial class v2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("street_foody.Models.Food", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<List<string>>("Categories")
                        .HasColumnType("text[]");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("VietameseName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("FoodDbSet");
                });

            modelBuilder.Entity("street_foody.Models.FoodCategory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("CategoryEnglishName")
                        .HasColumnType("text");

                    b.Property<string>("CategoryVietameseName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FoodID")
                        .HasColumnType("text");

                    b.Property<string>("StreetVendorID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FoodID");

                    b.HasIndex("StreetVendorID");

                    b.ToTable("FoodCategoryDbSet");
                });

            modelBuilder.Entity("street_foody.Models.StreetVendor", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("LocationHoursMap")
                        .HasColumnType("hstore");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PriceRange")
                        .HasColumnType("text");

                    b.Property<List<int>>("RatingList")
                        .HasColumnType("integer[]");

                    b.Property<string>("StandEnglishName")
                        .HasColumnType("text");

                    b.Property<string>("StandVietameseName")
                        .HasColumnType("text");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("StreetVendorDbSet");
                });

            modelBuilder.Entity("street_foody.Models.FoodCategory", b =>
                {
                    b.HasOne("street_foody.Models.Food", null)
                        .WithMany("FoodCategories")
                        .HasForeignKey("FoodID");

                    b.HasOne("street_foody.Models.StreetVendor", null)
                        .WithMany("FoodCategories")
                        .HasForeignKey("StreetVendorID");
                });

            modelBuilder.Entity("street_foody.Models.Food", b =>
                {
                    b.Navigation("FoodCategories");
                });

            modelBuilder.Entity("street_foody.Models.StreetVendor", b =>
                {
                    b.Navigation("FoodCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
